name: Test Build With Different Configurations

on:
  workflow_dispatch:

jobs:
  test-build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure feedback for all combinations
      fail-fast: false

      # Matrix: OS × Python versions × Compilers
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.11", "3.13"]
        build_type: [Debug, Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3-dev libjack-jackd2-dev

    - name: Get Python Path
      id: python-path
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          # Convert Unix-style path to Windows path
          PYTHON_PATH=$(cygpath -w "$(which python)")
          PYTHON_DIR=$(dirname "$(cygpath -w "$(which python)")")
        else
          PYTHON_PATH=$(which python)
          PYTHON_DIR=$(dirname "$(which python)")
        fi
        echo "python_executable=$PYTHON_PATH" >> $GITHUB_OUTPUT
        echo "python_root=$PYTHON_DIR" >> $GITHUB_OUTPUT
        echo "Python executable: $PYTHON_PATH"
        echo "Python root: $PYTHON_DIR"

    - name: Configure CMake
      run: >
        cmake -B build
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DPython_EXECUTABLE="${{ steps.python-path.outputs.python_executable }}"
        -DPython_ROOT_DIR="${{ steps.python-path.outputs.python_root }}"
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel

    - name: Test Python Import
      shell: bash
      run: |
        ls -la pysfizz
        python -c "
        import pysfizz
        parser = pysfizz.Parser()
        print('Build successful on', '${{ matrix.os }}', 'Python', '${{ matrix.python-version }}', 'Compiler', '${{ matrix.c_compiler }}')
        "